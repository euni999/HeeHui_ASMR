plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
}

group = 'com.youtube_api'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// https://mvnrepository.com/artifact/com.google.apis/google-api-services-mybusinessaccountmanagement
	implementation group: 'com.google.apis', name: 'google-api-services-mybusinessaccountmanagement', version: 'v1-rev20220727-2.0.0'
	// https://mvnrepository.com/artifact/com.google.api-client/google-api-client
	implementation group: 'com.google.api-client', name: 'google-api-client', version: '2.0.0'
	// https://mavenlibs.com/maven/dependency/com.google.apis/google-api-services-youtube
	implementation 'com.google.apis:google-api-services-youtube:v3-rev20220719-2.0.0'
	// https://mvnrepository.com/artifact/com.google.apis/google-api-services-sheets
	implementation group: 'com.google.apis', name: 'google-api-services-sheets', version: 'v4-rev20210629-1.32.1'

// https://mvnrepository.com/artifact/com.google.http-client/google-http-client-jackson2
	implementation group: 'com.google.http-client', name: 'google-http-client-jackson2', version: '1.42.2'
	implementation group: 'org.json', name: 'json', version: '20220320'

// https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api
	implementation group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
// https://mvnrepository.com/artifact/com.borjaglez/springify-repository
	implementation group: 'com.borjaglez', name: 'springify-repository', version: '0.3.3'


	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	implementation 'mysql:mysql-connector-java'
	implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.30'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation'org.springframework.boot:spring-boot-starter-jdbc'
	implementation'com.h2database:h2'

	// GCP
	implementation 'com.google.cloud.sql:mysql-socket-factory-connector-j-8:1.7.0'

	//MyBatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'

	//JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
	implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'


	//lombok
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

//	// spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
}

tasks.named('test') {
	useJUnitPlatform()
}





def frontendDir = "src/main/frontend"


sourceSets {
	main {
		resources {
			srcDirs = ["$frontendDir/build", "src/main/resources"]
		}
	}
}

processResources {
	dependsOn "copyWebApp"
}

task copyWebApp(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "web/src/main/resources/static"
}
task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	}
	else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "frontend/build"
	into "web/src/main/resources/static"
}